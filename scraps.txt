==== regular-fibonacci ===
document.addEventListener("DOMContentLoaded", () => {
            document.getElementById("start").addEventListener("click", () => {
                global = 0;
                fibbonaci(32);
            })
        })

        let global = 0;

        function fibbonaci(n) {
            global++;
            document.getElementById("result").textContent = global;
            if (n === 0) {
                return 1;
            }
            if (n === 1) {
                return 1;
            }

            return fibbonaci(n - 1) + fibbonaci(n - 2);
        }

==== set-timeout-0 =====
console.log("One");
console.log("Two");
console.log("Three");
console.log("Four");
console.log("Five");

==== set-timeout-1 =====
var names = ["One", "Two", "Three", "Four", "Five"];
names.forEach(name => console.log(name));

==== set-timeout-2 =====

const getRandomInterval = (from: num) => Math.Random()

console.log("One");
setTimeout(function() {
    console.log("Two");
    setTimeout(function() {
        setTimeout(function() {
            setTimeout(function() {
                console.log("Five");
            }, 1000);
            console.log("Four");
        }, 1000);
        console.log("Three");
    }, 1000);
}, 1000);

==== set-timeout-3 =====
function delay(ms) {
    return new Promise(resolve => setTimeout(()=>resolve(), ms));
}

console.log("One");

delay(1000)
    .then(() => console.log("Two"))
    .then(() => delay(1000))
    .then(() => console.log("Three"))
    .then(() => delay(1000))
    .then(() => console.log("Four"))
    .then(() => delay(1000))
    .then(() => console.log("Five"))

==== set-timeout-3 =====
function delay(ms) {
    return new Promise(resolve => setTimeout(()=>resolve(), ms));
}

async function countEm(){
    console.log("One");
    await delay(1000);
    console.log("Two");
    await delay(1000);
    console.log("Three");
    await delay(1000);
    console.log("Four");
    await delay(1000);
    console.log("Five");
}

countEm();


==== layered-cb =====

class InnerCbLayer {
    getInnerValue() {
        return "inner";
    }
}

class MidCbLayer {
    constructor(public inner: InnerCbLayer) { }

    getMidValue() {
        return "middle-" + this.inner.getInnerValue();
    }
}

class OuterCbLayer {
    constructor(public middle: MidCbLayer) { }

    getOuterValue() {
        return "outer-" + this.middle.getMidValue();
    }
}

let innerCb = new InnerCbLayer();
let midCb = new MidCbLayer(inner);
let outerCb = new OuterCbLayer(mid);

console.log(outerCb.getOuterValue());